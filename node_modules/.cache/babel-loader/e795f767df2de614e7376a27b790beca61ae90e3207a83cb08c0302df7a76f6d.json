{"ast":null,"code":"export const NATO_ALPHABET = {\n  'A': 'Alpha',\n  'B': 'Bravo',\n  'C': 'Charlie',\n  'D': 'Delta',\n  'E': 'Echo',\n  'F': 'Foxtrot',\n  'G': 'Golf',\n  'H': 'Hotel',\n  'I': 'India',\n  'J': 'Juliet',\n  'K': 'Kilo',\n  'L': 'Lima',\n  'M': 'Mike',\n  'N': 'November',\n  'O': 'Oscar',\n  'P': 'Papa',\n  'Q': 'Quebec',\n  'R': 'Romeo',\n  'S': 'Sierra',\n  'T': 'Tango',\n  'U': 'Uniform',\n  'V': 'Victor',\n  'W': 'Whiskey',\n  'X': 'X-ray',\n  'Y': 'Yankee',\n  'Z': 'Zulu'\n};\nexport const NATO_WORDS = ['Alpha', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf', 'Hotel', 'India', 'Juliet', 'Kilo', 'Lima', 'Mike', 'November', 'Oscar', 'Papa', 'Quebec', 'Romeo', 'Sierra', 'Tango', 'Uniform', 'Victor', 'Whiskey', 'X-ray', 'Yankee', 'Zulu'];\n\n// Real-world examples that use NATO alphabet\nexport const REAL_WORLD_EXAMPLES = {\n  aircraft: ['TC-ABC', 'TC-JKL', 'TC-XYZ', 'TC-ALP', 'TC-BRA', 'TC-CHA', 'TC-DEL', 'TC-ECH', 'TC-FOX', 'TC-GOL', 'TC-HOT', 'TC-IND', 'TC-JUL', 'TC-KIL', 'TC-LIM', 'TC-MIK', 'TC-NOV', 'TC-OSC', 'TC-PAP', 'TC-QUE', 'TC-ROM', 'TC-SIE', 'TC-TAN', 'TC-UNI', 'TC-VIC', 'TC-WHI', 'TC-XRA', 'TC-YAN', 'TC-ZUL'],\n  airports: ['LAX', 'JFK', 'LHR', 'CDG', 'AMS', 'FRA', 'MAD', 'BCN', 'MUC', 'ZUR', 'ARN', 'CPH', 'OSL', 'HEL', 'WAW', 'PRG', 'BUD', 'VIE', 'BRU', 'DUB', 'IST', 'ESB', 'SAW', 'AYT', 'ADB', 'BJV', 'DLM', 'GZT', 'KSY', 'NAV'],\n  names: ['John', 'Mary', 'David', 'Sarah', 'Michael', 'Emma', 'Robert', 'Lisa', 'William', 'Jennifer', 'Richard', 'Linda', 'Joseph', 'Patricia', 'Thomas', 'Barbara', 'Charles', 'Susan', 'Christopher', 'Jessica', 'Daniel', 'Dorothy', 'Matthew', 'Nancy', 'Anthony', 'Karen', 'Mark', 'Betty', 'Donald', 'Helen'],\n  callsigns: ['Speedbird', 'Delta', 'American', 'United', 'Lufthansa', 'Air France', 'British Airways', 'Emirates', 'Qatar', 'Turkish', 'KLM', 'Iberia', 'SAS', 'Finnair', 'Austrian', 'Swiss', 'Alitalia', 'Aegean', 'Ryanair', 'EasyJet', 'Wizz Air', 'Pegasus', 'SunExpress', 'Corendon', 'Onur Air']\n};\nexport const getRandomNatoItem = () => {\n  const letters = Object.keys(NATO_ALPHABET);\n  const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n  return {\n    letter: randomLetter,\n    word: NATO_ALPHABET[randomLetter]\n  };\n};\nexport const getRandomRealWorldExample = () => {\n  const categories = Object.keys(REAL_WORLD_EXAMPLES);\n  const randomCategory = categories[Math.floor(Math.random() * categories.length)];\n  const examples = REAL_WORLD_EXAMPLES[randomCategory];\n  const randomExample = examples[Math.floor(Math.random() * examples.length)];\n  return {\n    category: randomCategory,\n    text: randomExample,\n    natoSpelling: randomExample.split('').map(char => {\n      const upperChar = char.toUpperCase();\n      return NATO_ALPHABET[upperChar] || char;\n    }).filter(item => item !== ' ' && item !== '-')\n  };\n};\nexport const getRandomQuestion = () => {\n  const questionTypes = ['letter', 'word', 'realworld'];\n  const randomType = questionTypes[Math.floor(Math.random() * questionTypes.length)];\n  switch (randomType) {\n    case 'letter':\n      const letters = Object.keys(NATO_ALPHABET);\n      const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n      return {\n        type: 'letter',\n        question: randomLetter,\n        answer: NATO_ALPHABET[randomLetter],\n        points: NATO_ALPHABET[randomLetter].length\n      };\n    case 'word':\n      const randomWord = NATO_WORDS[Math.floor(Math.random() * NATO_WORDS.length)];\n      const correspondingLetter = Object.keys(NATO_ALPHABET).find(key => NATO_ALPHABET[key] === randomWord);\n      return {\n        type: 'word',\n        question: randomWord,\n        answer: correspondingLetter,\n        points: 1\n      };\n    case 'realworld':\n      const example = getRandomRealWorldExample();\n      return {\n        type: 'realworld',\n        question: example.text,\n        answer: example.natoSpelling,\n        category: example.category,\n        points: example.natoSpelling.length\n      };\n    default:\n      return getRandomQuestion();\n  }\n};\nexport const shuffleArray = array => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};","map":{"version":3,"names":["NATO_ALPHABET","NATO_WORDS","REAL_WORLD_EXAMPLES","aircraft","airports","names","callsigns","getRandomNatoItem","letters","Object","keys","randomLetter","Math","floor","random","length","letter","word","getRandomRealWorldExample","categories","randomCategory","examples","randomExample","category","text","natoSpelling","split","map","char","upperChar","toUpperCase","filter","item","getRandomQuestion","questionTypes","randomType","type","question","answer","points","randomWord","correspondingLetter","find","key","example","shuffleArray","array","shuffled","i","j"],"sources":["/Users/navid/nato_alphabet_test/src/natoAlphabet.js"],"sourcesContent":["export const NATO_ALPHABET = {\n  'A': 'Alpha',\n  'B': 'Bravo',\n  'C': 'Charlie',\n  'D': 'Delta',\n  'E': 'Echo',\n  'F': 'Foxtrot',\n  'G': 'Golf',\n  'H': 'Hotel',\n  'I': 'India',\n  'J': 'Juliet',\n  'K': 'Kilo',\n  'L': 'Lima',\n  'M': 'Mike',\n  'N': 'November',\n  'O': 'Oscar',\n  'P': 'Papa',\n  'Q': 'Quebec',\n  'R': 'Romeo',\n  'S': 'Sierra',\n  'T': 'Tango',\n  'U': 'Uniform',\n  'V': 'Victor',\n  'W': 'Whiskey',\n  'X': 'X-ray',\n  'Y': 'Yankee',\n  'Z': 'Zulu'\n};\n\nexport const NATO_WORDS = [\n  'Alpha', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf', 'Hotel',\n  'India', 'Juliet', 'Kilo', 'Lima', 'Mike', 'November', 'Oscar', 'Papa',\n  'Quebec', 'Romeo', 'Sierra', 'Tango', 'Uniform', 'Victor', 'Whiskey',\n  'X-ray', 'Yankee', 'Zulu'\n];\n\n// Real-world examples that use NATO alphabet\nexport const REAL_WORLD_EXAMPLES = {\n  aircraft: [\n    'TC-ABC', 'TC-JKL', 'TC-XYZ', 'TC-ALP', 'TC-BRA', 'TC-CHA', 'TC-DEL',\n    'TC-ECH', 'TC-FOX', 'TC-GOL', 'TC-HOT', 'TC-IND', 'TC-JUL', 'TC-KIL',\n    'TC-LIM', 'TC-MIK', 'TC-NOV', 'TC-OSC', 'TC-PAP', 'TC-QUE', 'TC-ROM',\n    'TC-SIE', 'TC-TAN', 'TC-UNI', 'TC-VIC', 'TC-WHI', 'TC-XRA', 'TC-YAN',\n    'TC-ZUL'\n  ],\n  airports: [\n    'LAX', 'JFK', 'LHR', 'CDG', 'AMS', 'FRA', 'MAD', 'BCN', 'MUC', 'ZUR',\n    'ARN', 'CPH', 'OSL', 'HEL', 'WAW', 'PRG', 'BUD', 'VIE', 'BRU', 'DUB',\n    'IST', 'ESB', 'SAW', 'AYT', 'ADB', 'BJV', 'DLM', 'GZT', 'KSY', 'NAV'\n  ],\n  names: [\n    'John', 'Mary', 'David', 'Sarah', 'Michael', 'Emma', 'Robert', 'Lisa',\n    'William', 'Jennifer', 'Richard', 'Linda', 'Joseph', 'Patricia', 'Thomas',\n    'Barbara', 'Charles', 'Susan', 'Christopher', 'Jessica', 'Daniel', 'Dorothy',\n    'Matthew', 'Nancy', 'Anthony', 'Karen', 'Mark', 'Betty', 'Donald', 'Helen'\n  ],\n  callsigns: [\n    'Speedbird', 'Delta', 'American', 'United', 'Lufthansa', 'Air France',\n    'British Airways', 'Emirates', 'Qatar', 'Turkish', 'KLM', 'Iberia',\n    'SAS', 'Finnair', 'Austrian', 'Swiss', 'Alitalia', 'Aegean', 'Ryanair',\n    'EasyJet', 'Wizz Air', 'Pegasus', 'SunExpress', 'Corendon', 'Onur Air'\n  ]\n};\n\nexport const getRandomNatoItem = () => {\n  const letters = Object.keys(NATO_ALPHABET);\n  const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n  return {\n    letter: randomLetter,\n    word: NATO_ALPHABET[randomLetter]\n  };\n};\n\nexport const getRandomRealWorldExample = () => {\n  const categories = Object.keys(REAL_WORLD_EXAMPLES);\n  const randomCategory = categories[Math.floor(Math.random() * categories.length)];\n  const examples = REAL_WORLD_EXAMPLES[randomCategory];\n  const randomExample = examples[Math.floor(Math.random() * examples.length)];\n  \n  return {\n    category: randomCategory,\n    text: randomExample,\n    natoSpelling: randomExample.split('').map(char => {\n      const upperChar = char.toUpperCase();\n      return NATO_ALPHABET[upperChar] || char;\n    }).filter(item => item !== ' ' && item !== '-')\n  };\n};\n\nexport const getRandomQuestion = () => {\n  const questionTypes = ['letter', 'word', 'realworld'];\n  const randomType = questionTypes[Math.floor(Math.random() * questionTypes.length)];\n  \n  switch (randomType) {\n    case 'letter':\n      const letters = Object.keys(NATO_ALPHABET);\n      const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n      return {\n        type: 'letter',\n        question: randomLetter,\n        answer: NATO_ALPHABET[randomLetter],\n        points: NATO_ALPHABET[randomLetter].length\n      };\n    case 'word':\n      const randomWord = NATO_WORDS[Math.floor(Math.random() * NATO_WORDS.length)];\n      const correspondingLetter = Object.keys(NATO_ALPHABET).find(\n        key => NATO_ALPHABET[key] === randomWord\n      );\n      return {\n        type: 'word',\n        question: randomWord,\n        answer: correspondingLetter,\n        points: 1\n      };\n    case 'realworld':\n      const example = getRandomRealWorldExample();\n      return {\n        type: 'realworld',\n        question: example.text,\n        answer: example.natoSpelling,\n        category: example.category,\n        points: example.natoSpelling.length\n      };\n    default:\n      return getRandomQuestion();\n  }\n};\n\nexport const shuffleArray = (array) => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}